<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($scope,spModal) {
  /* widget controller */
  var c = this;

    // Function to fetch records where the currently logged in user is the manager
     c.fetchRecords = function () {
				console.log('Hello'); 
        var userId = c.data.userID;

        c.server.get('/api/now/table/sn_contingent_mgmt_contract_worker', {
            params: {
                sysparm_query: 'contingent_request_manager=' + userId
            }
        }).then(function (response) {
            c.records = response.data.result;
        });
    };
	
		c.showConfirmationForRenewalRequest = function(sysId){
			var dialogConfig = {
            header: "Confirmation",
            message: "Are you sure you want to request for renewal of this contract?",
            buttons: [{
                label: "Yes",
                primary: true,
                value: "yes"
            }, {
                label: "No",
                primary: false,
                value: "no"
            }]
        };
				console.log('Click for request for renewal');
				spModal.open(dialogConfig).then(function(response) {
						console.log('RESPONSE ', response);
            if (response.value === 'yes') {
                c.requestRenewalRecord(sysId);
            } else {
                console.log('Renewal request cancelled by the hiring manager.');
            }
        });
		}
	
		c.requestRenewalRecord = function (sysId) {
				console.log('Renewal called');
				console.log('Sys_id : ' + sysId);
				c.data.action = 'requestRenewContract';
				c.data.sysID = sysId;
				c.server.update().then(function(){
					c.data.action = undefined;
					c.data.sysID = '';
					c.server.refresh();
				})
    };
	
		c.showConfirmation = function(sysId) {
        var dialogConfig = {
            header: "Confirmation",
            message: "Are you sure you want to request for renewal of this contract?",
            buttons: [{
                label: "Yes",
                primary: true,
                value: "yes"
            }, {
                label: "No",
                primary: false,
                value: "no"
            }]
        };
				console.log('Click');
				spModal.open(dialogConfig).then(function(response) {
						console.log('RESPONSE ', response);
            if (response.value === 'yes') {
                c.renewRecord(sysId);
            } else {
                console.log('Renewal canceled by the user.');
            }
        });
    };
	
		c.renewRecord = function (sysId) {
				console.log('Renewal called');
				console.log('Sys_id : ' + sysId);
				c.data.action = 'renewContract';
				c.data.sysID = sysId;
				c.server.update().then(function(){
					c.data.action = undefined;
					c.data.sysID = '';
					c.server.refresh();
				})
    };
    // Initial load of records 
    c.fetchRecords();
};]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>renew_contracts_table</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Renew Contracts table</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
    data.records = [];
		data.userID = gs.getUserID();
    // Query the table and set the result in the 'records' variable
    var gr = new GlideRecord('sn_contingent_mgmt_contract_worker');
    gr.addQuery('contingent_request_manager', gs.getUserID());
		gr.addEncodedQuery('isrenewalrequested=no^ORisrenewalrequested=approved');
	
		var currentDateTime = new GlideDateTime();
		currentDateTime.addDaysUTC(14);
		gr.addQuery('end_date', '!=', ''); 
		gr.addQuery('end_date', '<=', currentDateTime);

    gr.query();
		data.header = ['Worker Name','Start Date','End Date','Contingent Request Manager','Request Renewal'];

    while (gr.next()) {
        var record = {
            workerName: gr.worker_name.getDisplayValue(),
            startDate: gr.start_date.getDisplayValue(),
            endDate: gr.end_date.getDisplayValue(),
            manager: gr.contingent_request_manager.getDisplayValue(),
						sys_id: gr.getUniqueValue()
        };
        data.records.push(record);
    }
	
		if(input){
			if(input.action == 'renewContract'){
				var sysID = input.sysID;
				gs.info('Update called, sysID : ' + sysID);
				var gr1 = new GlideRecord('sn_contingent_mgmt_contract_worker');
				if(gr1.get(sysID)){
					
						var valueOfEndDate = gr1.getValue('end_date');
						var currentDateStr = valueOfEndDate;
						var currentDate = new Date(currentDateStr.replace(/-/g, '/'));

						// Check if currentDate is a valid Date object
						if (!isNaN(currentDate.getTime())) {
								// Create a new Date object for 30 days after the current date
								var nextDate = new Date(currentDate);
								gs.info('Current End Date : ' + valueOfEndDate);
								nextDate.setDate(currentDate.getDate() + 31);

								// 'nextDate' now contains the date and time 30 days after 'currentDate'
								var formattedDateStr = nextDate.toISOString().replace(/T/, ' ').replace(/\..+/, '');
								gs.info("Next date: " + nextDate);
								gs.info("Formated next date: " + formattedDateStr);
								gr1.setValue('end_date',formattedDateStr);
								gr1.update();
							
								var gr2 = new GlideRecord('sn_contingent_mgmt_contingent_request');
								var contingentReqSysID = gr1.contingent_request;
								gs.info('Contingent Request SysID ' + contingentReqSysID);
								gr2.addQuery('sys_id',contingentReqSysID);
								gr2.query();
								if(gr2.next()){
									gr2.end_date = formattedDateStr;
									gr2.update();
									gs.info('Contingent Request UPDATED');
								}
								
								// var newEndDate = new Date(formattedDateStr);
								// gs.info('Updating new end date : ' + newEndDate);
						} else {
								gs.info("Next date: " + "error");
						}
					
					  
				}
				
				/*
				serverUpdate.query(function(result) {
					if (result.next()) {
						var currentDate = serverUpdate.getValue('end_date');
						gs.info('Current date: ' + currentDate);
		        var newEndDate = new Date(currentDate.setDate(currentDate.getDate() + 30));

						serverUpdate.setValue('end_date', newEndDate);
						serverUpdate.update();
						// You can perform additional actions after the record is updated
						console.log('Record updated successfully.');
					} else {
						console.error('Record not found with sys_id: ' + sysID);
					}
				});
				*/
				
				gs.info('Update done');
			}
			if(input.action == 'requestRenewContract'){
				var contractWorkerSysID = input.sysID;
				console.log('Contract Worker Record SYSID: ' + contractWorkerSysID);
				// this is the sysId of a record in the contract worker table.
				var gr3 = new GlideRecord('sn_contingent_mgmt_contract_worker');
				gr3.addQuery('sys_id',contractWorkerSysID);
				gr3.query();
				if(gr3.next()){
					gr3.isrenewalrequested = 'requested';
					gr3.update();
					console.log('REQUESTED FOR RENEWAL');
				}
				
				/*
				if(gr3.next()){
					var contingentReqSYSId = gr3.getValue('contingent_request');
					console.log('Contingent RequestSYSID : ' + contingentReqSYSId);
					var gr4 = new GlideRecord('sn_contingent_mgmt_contingent_request');
					gr4.addQuery('sys_id',contingentReqSYSId);
					gr4.query();
					if(gr4.next()){
						console.log('Hii');
						console.log('NUmber : '+gr4.number);
						gr4.isrenewalrequested = 'requested';
						gr4.update();
						console.log('REQUESTED FOR RENEWAL');
					}
				}
				*/
			}
		}
	
})();



















]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-01-12 11:14:52</sys_created_on>
        <sys_id>3d80aef3932bb51098002763b189185e</sys_id>
        <sys_mod_count>135</sys_mod_count>
        <sys_name>Renew Contracts table</sys_name>
        <sys_package display_value="Contingent Mgmt Application" source="sn_contingent_mgmt">a573ef1c9313f11098002763b18918b2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Contingent Mgmt Application">a573ef1c9313f11098002763b18918b2</sys_scope>
        <sys_update_name>sp_widget_3d80aef3932bb51098002763b189185e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-01-15 11:56:08</sys_updated_on>
        <template><![CDATA[<div>
  	<h1>Request Contract Renewals Page</h1>
  	<hr>
  	<p>Dear hiring manager,</p>
  	<p>The following are the list of contracts that are expiring (within 14 days from now), please take necessary steps to renew it if required.</p>
    <table id="contingentWorkerTable" class="table">
        <thead>
            <tr>
                <th ng-repeat="col in data.header">{{col}}</th>
            </tr>
        </thead>
        <tbody>
            <tr ng-repeat="record in data.records">
                <td>{{record.workerName}}</td>
                <td>{{record.startDate}}</td>
                <td>{{record.endDate}}</td>
                <td>{{record.manager}}</td>
	              <td><button class="renew-button" ng-click="c.showConfirmationForRenewalRequest(record.sys_id)">Request Renewal</button></td>
            </tr>
        </tbody>
    </table>
</div>]]></template>
    </sp_widget>
</record_update>
